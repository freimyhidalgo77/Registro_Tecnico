@page "/TiposTecnicos/Create"
@rendermode InteractiveServer
@inject TiposTecnicoService tiposTecnicoService
@inject NavigationManager navigation

<PageTitle>Crear nuevo t&eacute;cnico</PageTitle>
<EditForm Model="tecnico" OnValidSubmit="Crear">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shado-lg">
			@*Header*@
			<div class="card header bg-primary text-white">
				<h3>Crear nuevo tipo de t&eacute;cnico</h3>
			</div>
			<div class="card-body">
				@*Id*@
				<label class="form-label" for="id"><strong>TipoId</strong></label>
				<InputNumber id="TipoId" class="form-control" @bind-Value="tecnico.TipoId" readonly></InputNumber>

				@*Descripcion*@
				<label class="form-label" for="descripcion"><strong>Descripcion</strong></label>
				<InputText id="Descripcion" class="form-control" @bind-Value="tecnico.Descripcion"></InputText>
				<ValidationMessage For="@(() =>tecnico.Descripcion)"></ValidationMessage>
			</div>
			@*Footer*@
			<div class="card-footer">
				<button type="button" class="btn btn-secondary bi bgi arrow-left" @onclick="Volver"> Volver</button>
				<button type="submit" class="btn btn-success bi bi-pencil-fill"> Guardar</button>
			</div>
		 </div>
		<div>
	</div>
</div>
</EditForm>

 

@code {

	public Tecnicos tecnicos { get; set; } = new Tecnicos();
	public TiposTecnicos tecnico { get; set; } = new TiposTecnicos();


	public async Task Crear()
	{
		if (!await Validar())
		{
			await tiposTecnicoService.Guardar(tecnico);
			tecnico = new TiposTecnicos();
			navigation.NavigateTo("/TiposTecnicos/Index");

		}
	}

	public async Task<bool> Validar()
	{
		return await tiposTecnicoService.TipoTecnicoDescripExiste(tecnico.Descripcion);
	}

	public void Volver()
	{
		navigation.NavigateTo("/TiposTecnicos/Index");
	}

}
