@page "/TiposTecnicos/Edit/{TecnicosId:int}"
@rendermode InteractiveServer
@inject TiposTecnicoService tiposTecnicosService
@inject NavigationManager navigation

<PageTitle>Editar t&eacute;cnico</PageTitle>
<EditForm Model="tecnicos" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h1><strong>Editar t&eacute;cnico</strong></h1>
			</div>
			<div class="card-body">
				

				<label class="form-label"><strong>Descrip&oacute;on</strong></label>
				<InputText id="NombreTecnico" class="form-control" @bind-Value="tecnicos.Descripcion"></InputText>
				<ValidationMessage For="@(()=> tecnicos.Descripcion)"></ValidationMessage>

			</div>
			<div class="card-footer">
				<button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
				<button type="submit" class="btn btn-success bi bi-pencil-square"> Modificar</button>
			</div>
		</div>
	</div>

</EditForm>
 
  
 
@code {

	[Parameter]
	public int TecnicosId { get; set; }
	public TiposTecnicos tecnicos { get; set; } = new TiposTecnicos();
	public bool Repetido { get; set; }


	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		if (TecnicosId > 0)
		{
			tecnicos = await tiposTecnicosService.Buscar(TecnicosId);
		}

	}


	public async Task<bool> Validar()
	{
		var existe = await tiposTecnicosService.TipoTecnicoDescripExiste(tecnicos.Descripcion);
		Repetido = existe == null;
		return Repetido;

	}

	public async Task Modificar()
	{
		if (!await Validar())
		{
			await tiposTecnicosService.Guardar(tecnicos);
			tecnicos = new TiposTecnicos();
			Volver();
		}
	}


	public void Volver()
	{
		navigation.NavigateTo("/TiposTecnicos/Index");
	}






}