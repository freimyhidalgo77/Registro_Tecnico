<div class="col-auto input-group align-items-center">

    <InputSelect class="form-select" @bind-Value="ArticuloId">
        <option disabled value="0">Seleccione un articulo</option>
        @foreach (var articulo in ListaArticulo)
        {
            <option value="@articulo.ArticuloId">
                @articulo.descripcion --- $ @(articulo.precio.ToString("0.00"))-- $ @(articulo.costo.ToString("0.00"))
            </option>
        }
    </InputSelect>


    <label class="col-form-label input-group-text">Cantidad</label>
    <InputNumber class="form-control" @bind-Value="Cantidad"></InputNumber>
    <button type="button" class="btn btn-success bi bi-plus-square" @onclick="ElegirArticulo"></button>
</div>
@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-danger">@mensaje</div>
}

@code {
    [Parameter]
    public List<Articulos> ListaArticulo { get; set; } = [];

    [Parameter]
    public int ArticuloId { get; set; }

    [Parameter]
    public int Cantidad { get; set; }

    [Parameter]
    public EventCallback<(Articulos articulo, int Cantidad)> ArticuloSeleccionado { get; set; }

    public string? mensaje { get; set; } = string.Empty;

    private async Task ElegirArticulo()
    {
        if (ArticuloId > 0 && Cantidad > 0)
        {
            var ArticuloElegido = ListaArticulo.Single(a => a.ArticuloId == ArticuloId);
            if(ArticuloElegido != null)
            {
                if(ArticuloElegido.existencia < Cantidad)
                {
                    mensaje = "La cantidad solicitada no puede ser mayor a la existencia";
                }
                else
                {
                    await ArticuloSeleccionado.InvokeAsync((ArticuloElegido, Cantidad));
                }
            }
            else
            {
                mensaje = "Debe seleccionar un articulo y cantidad valida"; 
            }
     
        }
       
    }
}