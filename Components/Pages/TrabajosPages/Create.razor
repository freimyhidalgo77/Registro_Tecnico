@page "/Trabajos/Create"
@rendermode InteractiveServer
@inject TiposTecnicoService tiposTecnicoService
@inject TecnicoService tecnicoService
@inject TrabajoService trabajoService
@inject ClienteService clienteService
@inject PrioridadesService prioridadesService
@inject NavigationManager navigation

<PageTitle>Crear consulta Trabajo</PageTitle>
<EditForm Model="trabajo" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container"></div>
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white text-center">
            <h1><strong>Crear consulta de trabajo</strong></h1>
        </div>
        <div class="card-body">
            <label class="form-label" for="TrabajoId"><strong>Trabajo ID:</strong></label>
            <InputNumber id="TrabajoId" class="form-control" @bind-Value="trabajo.TrabajoId" readonly></InputNumber>

            <label class="form-label" for="Fecha"><strong>Fecha</strong></label>
            <InputDate id="Fecha" class="form-control" @bind-Value="trabajo.Fecha"></InputDate>
            <ValidationMessage For="@(() => trabajo.Fecha)"></ValidationMessage>

            <label class="form-label"><strong>Cliente ID:</strong></label>
            <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                <option value="0">Seleccione el Id del cliente</option>
                @foreach (var client in ClienteList)
                {
                    <option value="@client.ClienteId">@client.ClienteId</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => trabajo.ClienteId)"></ValidationMessage>

            <label class="form-label"><strong>Nombre Cliente:</strong></label>
            <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                <option value="0">Seleccione el Id del cliente</option>
                @foreach (var client in ClienteList)
                {
                    <option value="@client.ClienteId">@client.NombreCliente</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Técnico ID:</strong></label>
            <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                <option value="0">Seleccione el Id del técnico</option>
                @foreach (var tipo in tecnicList)
                {
                    <option value="@tipo.TecnicoId">@tipo.TecnicoId</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Nombre del Técnico :</strong></label>
            <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                <option value="0">Seleccione el Id del técnico</option>
                @foreach (var tipo in tecnicList)
                {
                    <option value="@tipo.TecnicoId">@tipo.NombreTecnico</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Descripción:</strong></label>
            <InputSelect @bind-Value="trabajo.TipoId" class="form-control">
                <option value="0">Seleccione el tipo de técnico</option>
                @foreach (var tipo in TipoList)
                {
                    <option value="@tipo.TipoId">@tipo.Descripcion</option>
                }
            </InputSelect>

            <label class="form-label" for="Monto"><strong>Monto:</strong></label>
            <InputNumber id="Monto" class="form-control" @bind-Value="trabajo.Monto"></InputNumber>
            <ValidationMessage For="@(() => trabajo.Monto)"></ValidationMessage>

            <label class="form-label"><strong>Prioridad ID:</strong></label>
            <InputSelect @bind-Value="trabajo.PrioridadId" class="form-control">
                <option value="0">Seleccione la prioridad del trabajo</option>
                @foreach (var prioridad in prioridadesList)
                {
                    <option value="@prioridad.PrioridadId">@prioridad.PrioridadId</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Prioridad de Trabajo:</strong></label>
            <InputSelect @bind-Value="trabajo.PrioridadId" class="form-control">
                <option value="0">Seleccione la prioridad del trabajo</option>
                @foreach (var prioridad in prioridadesList)
                {
                    <option value="@prioridad.PrioridadId">@prioridad.descripcion</option>
                }
            </InputSelect>

            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
                <button type="submit" class="btn btn-success bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos tecnicos { get; set; } = new Tecnicos();
    public Clientes clientes { get; set; } = new Clientes();
    public Trabajos trabajo { get; set; } = new Trabajos();
    public TiposTecnicos tecnico { get; set; } = new TiposTecnicos();
    public List<Tecnicos> tecnicList { get; set; } = new List<Tecnicos>();
    public List<TiposTecnicos> TipoList { get; set; } = new List<TiposTecnicos>();
    public List<Clientes> ClienteList { get; set; } = new List<Clientes>();
    public List<Trabajos> ListTrabajos = new List<Trabajos>();
    public Prioridades prioridades { get; set; } = new Prioridades();
    public List<Prioridades> prioridadesList { get; set; } = new List<Prioridades>();

    protected override async Task OnInitializedAsync()
    {
        TipoList = await tiposTecnicoService.Listar(t => true);
        tecnicList = await tecnicoService.Listar(t => true);
        ClienteList = await clienteService.Listar(t => true);
        ListTrabajos = await trabajoService.Listar(t => true);
        prioridadesList = await prioridadesService.Listar(t => true);
    }

    public async Task<bool> Validar()
    {
        var idtrabajoexiste = await trabajoService.BuscarTrabajo(trabajo.TrabajoId);
        return idtrabajoexiste == null;
    }

    public async Task Crear()
    {
        try
        {
            if (await Validar()) 
            {
                Console.WriteLine($"Guardando trabajo: ID = {trabajo.TrabajoId}, Cliente ID = {trabajo.ClienteId}, Técnico ID = {trabajo.TecnicoId}, Monto = {trabajo.Monto}");
                await trabajoService.Guardar(trabajo);
                trabajo = new Trabajos();
                navigation.NavigateTo("/Trabajos/Index");
            }
            else
            {
                Console.WriteLine("El trabajo ya existe y no se puede guardar.");
            }
        }
        catch (Exception ex)
        {
            // Manejo detallado de errores
            Console.WriteLine($"Error al guardar el trabajo: {ex.Message}");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Trabajos/Index");
    }
}
