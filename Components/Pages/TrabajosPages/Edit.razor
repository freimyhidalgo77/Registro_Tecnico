@page "/Trabajos/Edit/{TrabajoId:int}"
@rendermode InteractiveServer
@inject TrabajoService trabajoService
@inject TecnicoService tecnicoService
@inject TiposTecnicoService tiposTecnicoService
@inject ClienteService clienteService
@inject NavigationManager navigation
@inject IJSRuntime JS


<PageTitle>Editar trabajo</PageTitle>
<EditForm Model="trabajo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container"></div>
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white text-center">
            <h1><strong>Editar trabajo</strong></h1> 
        </div>
        <div class="card-body">
            <label class="form-label" for="TrabajoId"><strong>Trabajo ID:</strong></label>
            <InputNumber id="TrabajoId" class="form-control" @bind-Value="trabajo.TrabajoId" readonly></InputNumber>

            <label class="form-label" for="Fecha"><strong>Fecha</strong></label>
            <InputDate id="Fecha" class="form-control" @bind-Value="trabajo.Fecha"></InputDate>
            <ValidationMessage For="@(() => trabajo.Fecha)"></ValidationMessage>

            <label class="form-label"><strong>Cliente ID:</strong></label>
            <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                <option value="0">Seleccione el Id del cliente</option>
                @foreach (var client in ClienteList)
                {
                    <option value="@client.ClienteId">@client.ClienteId</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => trabajo.ClienteId)"></ValidationMessage>

            <label class="form-label"><strong>Nombre Cliente:</strong></label>
            <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                <option value="0">Seleccione el nombre del cliente</option>
                @foreach (var client in ClienteList)
                {
                    <option value="@client.ClienteId">@client.NombreCliente</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Técnico ID:</strong></label>
            <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                <option value="0">Seleccione el Id del técnico</option>
                @foreach (var tipo in tecnicList)
                {
                    <option value="@tipo.TecnicoId">@tipo.TecnicoId</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Nombre del Técnico :</strong></label>
            <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                <option value="0">Seleccione el nombre del técnico</option>
                @foreach (var tipo in tecnicList)
                {
                    <option value="@tipo.TecnicoId">@tipo.NombreTecnico</option>
                }
            </InputSelect>

            <label class="form-label"><strong>Descripción:</strong></label>
            <InputSelect @bind-Value="trabajo.TipoId" class="form-control">
                <option value="0">Seleccione el tipo de técnico</option>
                @foreach (var tipo in TipoList)
                {
                    <option value="@tipo.TipoId">@tipo.Descripcion</option>
                }
            </InputSelect>

            <label class="form-label" for="Monto"><strong>Monto:</strong></label>
            <InputNumber id="Monto" class="form-control" @bind-Value="trabajo.Monto"></InputNumber>
            <ValidationMessage For="@(() => trabajo.Monto)"></ValidationMessage>

            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
                <button type="submit" class="btn btn-primary bi bi-floppy-fill"> Guardar</button>
                <button type="button" class="btn btn-success bi bi-whatsapp" @onclick="Enviar"> Enviar WhatsApp</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos trabajo { get; set; } = new Trabajos();
    public List<Clientes> ClienteList { get; set; } = new List<Clientes>();
    public List<Tecnicos> tecnicList { get; set; } = new List<Tecnicos>();
    public List<TiposTecnicos> TipoList { get; set; } = new List<TiposTecnicos>();
    public Clientes clientes { get; set; } = new Clientes();
    public Tecnicos tecnicos = new Tecnicos();

    protected override async Task OnInitializedAsync()
    {
        if (TrabajoId > 0)
        {
            trabajo = await trabajoService.Buscar(TrabajoId);
            if (trabajo == null)
            {
                trabajo = new Trabajos();
            }
        }
        else
        {
            trabajo = new Trabajos();
        }

        // Fetch lists for dropdowns
        ClienteList = await clienteService.Listar(c => true);
        tecnicList = await tecnicoService.Listar(t => true);
        TipoList = await tiposTecnicoService.Listar(t => true);
    }

    public async Task<bool> Validar()
    {
        var existe = await trabajoService.BuscarTrabajo(TrabajoId);
        return existe == null;
    }

    public async Task Modificar()
    {
        if (!await Validar())
        {
            await trabajoService.Guardar(trabajo);
            Volver();
        }
    }

    public async Task Enviar()
    {
        if (clientes != null)
        {
            string mensaje = $"Su solicitud se ha actualizado con los detalles del técnico {tecnicos.NombreTecnico}.";
            string conexion = Uri.EscapeDataString(mensaje);
            string URLwhats = $"https://wa.me/{clientes.NumeroWhatsapp}?text={conexion}";
            await JS.InvokeVoidAsync("open", URLwhats, "_blank");
        }
    }

     

    public void Volver()
    {
        navigation.NavigateTo("/Trabajos/Index");
    }
}
